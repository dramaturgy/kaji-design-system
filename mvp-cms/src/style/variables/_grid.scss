@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;

  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not comparable($num, $prev-num) {
      @warn 'Potentially invalid value for #{$map-name}: This map must be in ascending order, but key "#{$key}"" has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key "#{$prev-key}"!';
    } @else if $num <= $prev-num {
      @warn 'Invalid value for #{$map-name}: This map must be in ascending order, but key "#{$key}" has value #{$num} which isn\'t greater than #{$prev-num}, the value of the previous key "#{$prev-key}"!';
    }

    $prev-key: $key;
    $prev-num: $num;
  }
}

@mixin _assert-starts-at-zero($map) {
  $first-value: nth(map-values($map), 1);

  @if $first-value != 0 {
    @warn 'First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.';
  }
}

// Grid columns
//
// Set the number of columns and specify the width of the gutters.
$grid-columns:              12 !default;
$grid-gutter-width-base:    16px !default;
$grid-gutter-width-desktop: 24px !default;

$grid-gutter-widths: (
  xs: $grid-gutter-width-base,
  sm: $grid-gutter-width-base,
  md: $grid-gutter-width-desktop,
  lg: $grid-gutter-width-desktop,
  xl: $grid-gutter-width-desktop
) !default;

// Breakpoint
// Based on https://material.google.com/layout/responsive-ui.html#responsive-ui-breakpoints

$grid-breakpoints: (
  xs: 0,
  sm: 600px,
  md: 960px,
  lg: 1280px,
  xl: 1920px
) !default;

@include _assert-ascending($grid-breakpoints, '$grid-breakpoints');
@include _assert-starts-at-zero($grid-breakpoints);

// Container width
// Based on https://material.google.com/layout/responsive-ui.html#responsive-ui-breakpoints

$container-max-widths: (
  sm: 600px,
  md: 840px,
  lg: 1024px,
  xl: 1600px
) !default;

@include _assert-ascending($container-max-widths, '$container-max-widths');
